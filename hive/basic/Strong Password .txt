Strong Password 
Find the minimum number of characters to add to a password (P) to ensure that P meets the following criteria:

1. Contains at least 6 characters.

2. Contains at least one digit.

3. Contains at least one lowercase character.

4. Contains at least one uppercase character.

5. Contains at least one special character (!@#$%^&*()-+).



Input Format

First and only line of input contains a string P.



Output Format

Print the minimum number of characters that has to be added to P.



Constraints

1 <= len(P) <=50

P[i] âˆˆ {[a-z], [A-Z], [0-9], or [!@#$%^&*()-+ ]}.



Example

Input

He!!0



Output

1



Explanation

The given password P already contains one digit, one lowercase character, one uppercase character and one special character. However, it should also contain at least 6 characters. So we need to add 1 character to ensure it meets all the criteria.


def strong_password(n):
    n=len(P)

    has_digit=any(char.isdigit() for char in P)
    has_lower=any(char.islower() for char in P)
    has_upper=any(char.isupper() for char in P)
    has_special=any(char in "!@#$%^&*()_+" for char in P)

    missing_types=0
    if not has_digit:
        missing_types+=1
    if not has_lower:
        missing_types+=1
    if not has_upper:
        missing_types+=1
    if not has_special:
        missing_types+=1

    additions_for_length=max(0,6-n)
    return max(missing_types,additions_for_length)

P=input().strip()
result=strong_password(P)
print(result)
