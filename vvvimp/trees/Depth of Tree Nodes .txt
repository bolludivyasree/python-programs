Depth of Tree Nodes 
Given an array of unique elements, construct a Binary Search Tree and for every node, print the depth of that node.



Input Format

The first line of input contains T - the number of test cases. It is followed by 2T lines. The first line of each test case contains N - the number of nodes in the BST. The next line contains N unique integers - value of the nodes.



Output Format

For each test case, print the depth of every node of the Binary Search Tree, separated by a newline.



Constraints

1 <= T <= 1000

1 <= N <= 1000

0 <= ar[i] <= 10000



Example

Input

3

5

1 2 3 4 5

5

3 2 4 1 5

7

4 5 15 0 1 7 17



Output

0 1 2 3 4

0 1 1 2 2

0 1 2 1 2 3 3



Explanation



Self Explanatory



class Node:
    def __init__(self,data):
        self.data=data
        self.left=None
        self.right=None
def insert(root,key):
    if root==None:
        return Node(key)
    if root.data<key:
        root.right=insert(root.right,key)
    else:
        root.left=insert(root.left,key)
    return root
def depth(root,d,depth_val):
    if root==None:
        return
    #root.depth=d
    depth_val[root.data]=d
    depth(root.left,d+1,depth_val)
    depth(root.right,d+1,depth_val)
def getdepth(arr,depth_val): 
    return [depth_val[data] for data in arr]
    
t=int(input())
res=[]
for i in range(t):
    n=int(input())
    arr=list(map(int,input().split()))
    root=Node(arr[0])
    for i in range(1,n):
        root=insert(root,arr[i])
    depth_val={}
    depth(root,0,depth_val)
    depths=getdepth(arr,depth_val)
    res.append(" ".join(map(str,depths)))
print("\n".join(res))